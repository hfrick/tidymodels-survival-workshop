---
title: "2 - Your data budget"
subtitle: "Survival analysis with tidymodels"
format:
  revealjs: 
    slide-number: true
    footer: <https://workshops.tidymodels.org>
    include-before-body: header.html
    include-after-body: footer-annotations.html
    theme: [default, tidymodels.scss]
    width: 1280
    height: 720
knitr:
  opts_chunk: 
    echo: true
    collapse: true
    comment: "#>"
    fig.path: "figures/"
---

```{r setup}
#| include: false
#| file: setup.R
```

## Data on shelter cats

::: columns
::: {.column width="60%"}
-   The city of Long Beach releases data on animals at the Long Beach Animal Shelter.
-   Our dataset is a sample of the cats entering and leaving the shelter.
-   Type `?cat_adoption` to learn more about this dataset, including references.
:::

::: {.column width="40%"}
![](images/pet-house-blue.svg)
:::

:::

::: footer
Credit: <https://www.svgrepo.com/svg/194185/pet-house-kennel>
:::

## Data on shelter cats

```{r cats-quiet}
#| echo: false
data(cat_adoption, package = "modeldata")
```

-   N = `r nrow(cat_adoption)`
-   A time-to-event outcome, consisting of the `time` spent at the shelter and the `event` status. 
-   An event is a cat being homed by the Long Beach animal shelter. 
-   If a cat is transfered to a different organization that works to home them, this is recorded as a non-event.
-   Several **nominal** variables like sex, intake type and condition, as well as fur color.
-   Two **numeric** variables for the location of the intake or capture, latitiude and logitude.

## Data on shelter cats

```{r cats-print}
library(tidymodels)
library(survival)
library(modeldata)

cat_adoption
```

:::notes
FIXME: add decription of each variable?
:::

## Make the outcome

```{r cats-surv-outcome}
cat_adoption <- cat_adoption %>% 
  mutate(event_time = Surv(time, event), .keep = "unused")
```

## Data splitting and spending

For machine learning, we typically split data into training and test sets:

. . .

-   The **training set** is used to estimate model parameters.
-   The **test set** is used to find an independent assessment of model performance.

. . .

Do not 🚫 use the test set during training.

## Data splitting and spending

```{r test-train-split}
#| echo: false
#| fig.width: 12
#| fig.height: 3

set.seed(123)
library(forcats)
one_split <- slice(mtcars, 1:30) %>% 
  initial_split() %>% 
  tidy() %>% 
  add_row(Row = 1:30, Data = "Original") %>% 
  mutate(Data = case_when(
    Data == "Analysis" ~ "Training",
    Data == "Assessment" ~ "Testing",
    TRUE ~ Data
  )) %>% 
  mutate(Data = factor(Data, levels = c("Original", "Training", "Testing")))
all_split <-
  ggplot(one_split, aes(x = Row, y = fct_rev(Data), fill = Data)) + 
  geom_tile(color = "white",
            linewidth = 1) + 
  scale_fill_manual(values = splits_pal, guide = "none") +
  theme_minimal() +
  theme(axis.text.y = element_text(size = rel(2)),
        axis.text.x = element_blank(),
        legend.position = "top",
        panel.grid = element_blank()) +
  coord_equal(ratio = 1) +
  labs(x = NULL, y = NULL)
all_split
```

# The more data<br>we spend 🤑<br><br>the better estimates<br>we'll get.

## Data splitting and spending

-   Spending too much data in **training** prevents us from computing a good assessment of predictive **performance**.

. . .

-   Spending too much data in **testing** prevents us from computing a good estimate of model **parameters**.

## Your turn {transition="slide-in"}

![](images/parsnip-flagger.jpg){.absolute top="0" right="0" width="150" height="150"}

*When is a good time to split your data?*

```{r ex-when-to-split}
#| echo: false
countdown::countdown(minutes = 3, id = "when-to-split")
```

# The testing data is precious 💎

## The initial split `r hexes("rsample")` {.annotation}

```{r cat-split}
set.seed(123)
cat_split <- initial_split(cat_adoption)
cat_split
```

:::notes
How much data in training vs testing?
This function uses a good default, but this depends on your specific goal/data
We will talk about more powerful ways of splitting, like stratification, later
:::

## Accessing the data `r hexes("rsample")`

```{r cat-train-test}
cat_train <- training(cat_split)
cat_test <- testing(cat_split)
```

## The training set`r hexes("rsample")`

```{r cat-train}
cat_train
```

## The test set `r hexes("rsample")`

🙈

. . .

There are `r nrow(cat_test)` rows and `r ncol(cat_test)` columns in the test set.

## Your turn {transition="slide-in"}

![](images/parsnip-flagger.jpg){.absolute top="0" right="0" width="150" height="150"}

*Split your data so 20% is held out for the test set.*

*Try out different values in `set.seed()` to see how the results change.*

<br>

*Extension/Challenge: This is a simple random split. Which other types of splits can you think of and does rsample offer corresponding functions?*

```{r ex-try-splitting}
#| echo: false
countdown::countdown(minutes = 5, id = "try-splitting")
```

## Data splitting and spending `r hexes("rsample")`

```{r cat-split-prop}
set.seed(123)
cat_split <- initial_split(cat_adoption, prop = 0.8)
cat_train <- training(cat_split)
cat_test <- testing(cat_split)

nrow(cat_train)
nrow(cat_test)
```

# Exploratory data analysis for ML 🧐

## Your turn {transition="slide-in"}

![](images/parsnip-flagger.jpg){.absolute top="0" right="0" width="150" height="150"}

*Explore the `cat_train` data on your own!*

* *What does the Kaplan-Meier curve look like for the outcome, `event_time`?*
* *How does `event_time` differ across the categorical variables?*
* *What's the distribution of the location information, `latitude` and `longitude`?*

<br>

*Extension/Challenge: How would you visualize the relelationship between the outcome and longitude and latitude, respectively?*

```{r ex-explore-cat}
#| echo: false
countdown::countdown(minutes = 8, id = "explore-cat")
```

::: notes
Make a plot or summary and then share with neighbor
:::

## 

```{r cat-event-time}
#| fig-align: 'center'
library(ggsurvfit)
survfit(event_time ~ 1, data = cat_adoption) %>% ggsurvfit()
```

## 

```{r cat-event-time-by-neutered}
#| fig-align: 'center'
survfit(event_time ~ neutered, data = cat_train) %>% ggsurvfit()
```

## 

```{r cat-event-time-by-brown-tabby}
#| fig-align: 'center'
survfit(event_time ~ brown_tabby, data = cat_train) %>% ggsurvfit()
```

## 

```{r cat-event-time-by-gray}
#| fig-align: 'center'
survfit(event_time ~ gray, data = cat_train) %>% ggsurvfit()
```

## 

```{r cat-leaflet}
#| fig-align: 'center'
library(leaflet)
cat_train %>% 
  leaflet() %>%
  addProviderTiles("CartoDB.Positron") %>%  
  addCircles(lng = ~ longitude, lat = ~ latitude)
```

## 

```{r cat-latitude}
#| fig-align: 'center'
smooth_ph_linear_pred(event_time ~ latitude, data = cat_adoption, deg_free = 6)
```
`smooth_ph_linear_pred()` a custom function, available  
in `slides/setup.R`.
<!-- FIXME: make that a link once the repo is final -->

::: notes
latitude ~ "y-axis"
:::

## 

```{r cat-longitude}
#| fig-align: 'center'
smooth_ph_linear_pred(event_time ~ longitude, data = cat_adoption, deg_free = 5)
```

::: notes
longitude ~ "x-axis"
:::

## The whole game - status update

```{r diagram-split, echo = FALSE}
#| fig-align: "center"
knitr::include_graphics("images/whole-game-transparent-split.jpg")
``` 
