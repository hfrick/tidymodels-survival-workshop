---
title: "3 - What makes a model?"
subtitle: "Survival analysis with tidymodels"
format:
  revealjs: 
    slide-number: true
    footer: <https://hfrick.github.io/tidymodels-survival-workshop>
    include-before-body: header.html
    include-after-body: footer-annotations.html
    theme: [default, tidymodels.scss]
    width: 1280
    height: 720
knitr:
  opts_chunk: 
    echo: true
    collapse: true
    comment: "#>"
    fig.path: "figures/"
---

```{r setup}
#| include: false
#| file: setup.R
```

## Your turn {transition="slide-in"}

![](images/parsnip-flagger.jpg){.absolute top="0" right="0" width="150" height="150"}

*How do you fit a linear model in R?*
<!-- FIXME: switch this to a proportional hazards model? -->

*How many different ways can you think of?*

```{r ex-how-to-fit-linear-model}
#| echo: false
countdown::countdown(minutes = 3, id = "how-to-fit-linear-model")
```

. . .

-   `lm` for linear model

-   `glm` for generalized linear model (e.g. logistic regression)

-   `glmnet` for regularized regression

-   `keras` for regression using TensorFlow

-   `stan` for Bayesian regression

-   `spark` for large data sets

## To specify a model `r hexes("parsnip")`

. . .

::: columns
::: {.column width="55%"}
-   Choose a [model]{.underline}
-   Specify an engine
-   Set the mode
:::

::: {.column width="45%"}
<img src="images/black-cat-walking-right.svg" alt="icon of a black cat walking to the right" width="50%">
:::
:::

::: footer
Credit: <https://www.svgrepo.com/svg/481270/cat-5>
:::

## To specify a model `r hexes("censored", "parsnip")`

```{r setup-previous}
#| echo: false
library(tidymodels)
library(censored)
library(modeldata)

cat_adoption <- cat_adoption %>% 
  mutate(event_time = Surv(time, event), .keep = "unused", .before = everything())

set.seed(27)
in_demo <- sample.int(nrow(cat_adoption), 50)
demo_cats <- cat_adoption %>% slice(in_demo)

set.seed(123)
cat_split <- initial_split(cat_adoption %>% slice(-in_demo), prop = 0.8)
cat_train <- training(cat_split)
cat_test <- testing(cat_split)
```

```{r proportional-hazards}
proportional_hazards()
```


:::notes
Models have default engines
:::

## To specify a model `r hexes("parsnip")`

::: columns
::: {.column width="55%"}
-   Choose a model
-   Specify an [engine]{.underline}
-   Set the mode
:::

::: {.column width="45%"}
<img src="images/black-cat-walking-right.svg" alt="icon of a black cat walking to the right" width="50%">
:::
:::

## To specify a model `r hexes("censored", "parsnip")`

```{r proportional-hazards-again}
proportional_hazards()
```

## To specify a model `r hexes("censored", "parsnip")`

```{r proportional-hazards-glmnet}
proportional_hazards() %>%
  set_engine("glmnet")
```


## To specify a model `r hexes("parsnip")`

::: columns
::: {.column width="55%"}
-   Choose a model
-   Specify an engine
-   Set the [mode]{.underline}
:::

::: {.column width="45%"}
<img src="images/black-cat-walking-right.svg" alt="icon of a black cat walking to the right" width="50%">
:::
:::


## To specify a model `r hexes("parsnip")`

```{r decision-tree}
decision_tree()
```

:::notes
Some models have a default mode
:::

## To specify a model `r hexes("censored", "parsnip")`

```{r decision-tree-censored-reg}
decision_tree() %>% 
  set_mode("censored regression")
```

. . .

<br></br>

::: r-fit-text
All available models are listed at <https://www.tidymodels.org/find/parsnip/> 
:::

##  {background-iframe="https://www.tidymodels.org/find/parsnip/"}

::: footer
:::

##  {background-iframe="https://censored.tidymodels.org/"}

::: footer
:::

## Your turn {transition="slide-in"}

![](images/parsnip-flagger.jpg){.absolute top="0" right="0" width="150" height="150"}

*Write the specification for a proportional hazards model.*

*Choose your engine.*<br></br>

::: r-fit-text
All available models are listed at <https://www.tidymodels.org/find/parsnip/>
:::

<br></br>

*Extension/Challenge: Edit this code to use a different model. For example, try using a conditional inference tree as implemented in the partykit package - or try an entirely different model type!*

```{r ex-explore-tree-spec}
#| echo: false
countdown::countdown(minutes = 5, id = "explore-tree-spec")
```


## Models we'll be using today

* Proportional hazards (PH) model
* Decision tree

## Proportional hazards model

::: columns
::: {.column width="50%"}
```{r plot-baseline}
#| echo: false
#| fig.width: 8
#| fig.height: 7

cat_new <- tibble(
  intake_condition = factor(c("normal", "fractious", "feral", "other", "under_age_or_weight", "ill_moderatete", "ill_mild"))
)

fit(proportional_hazards(), event_time ~ 1, data = cat_train) %>% 
  augment(new_data = cat_new[1,], eval_time = seq(0, 360, 1)) %>% 
  tidyr::unnest(cols = .pred) %>% 
  ggplot() +
  geom_step(aes(.eval_time, .pred_survival)) +
  labs(x = "Time", y = "Probability of not adopted") +
  theme_bw(base_size = 18)
```
:::

::: {.column width="40%"}
:::
:::

## Proportional hazards model

::: columns
::: {.column width="50%"}
```{r plot-ph}
#| echo: false
#| fig.width: 8
#| fig.height: 7

p_ph <- fit(proportional_hazards(), event_time ~ intake_condition, data = cat_train) %>% 
  augment(new_data = cat_new, eval_time = seq(0, 360, 1)) %>% 
  mutate(intake_condition = factor(intake_condition, levels = c("normal", "fractious", "feral", "other", "under_age_or_weight", "ill_moderatete", "ill_mild"))) %>% 
  tidyr::unnest(cols = .pred) %>% 
  ggplot() +
  geom_line(aes(.eval_time, .pred_survival, col = intake_condition)) +
  scale_color_discrete(guide = guide_legend(nrow = 3)) + 
  labs(x = "Time", y = "Probability of not adopted") +
  theme_bw(base_size = 18) +
  theme(legend.position = "bottom")
p_ph
```
:::

::: {.column width="50%"}
:::
:::

## Proportional hazards model

::: columns
::: {.column width="50%"}
```{r plot-ph-2}
#| echo: false
#| fig.width: 8
#| fig.height: 7

p_ph
```
:::

::: {.column width="50%"}

-   Hazard modeled via a baseline hazard and a linear combination of predictors:

$\lambda(t | x_i) = \lambda_0(t) \cdot \exp (x_i^T \beta)$

-   The hazard is proportional over all time $t$, and thus also the probability of survival is proportional.

:::
:::

## Decision tree

::: columns
::: {.column width="50%"}
```{r tree-fit}
#| echo: false

fit_dt <- decision_tree(cost_complexity = 0.008) %>%
  set_mode("censored regression") %>% 
  fit(event_time ~ intake_condition, data = cat_train) 
```

```{r plot-tree-fit}
#| echo: false
#| fig.width: 6
#| fig.height: 5
#| fig-align: center

library(partykit)
fit_pec <- fit_dt %>% extract_fit_engine()
fit_rpart <- fit_pec$rpart
fit_rpart %>% 
  as.party() %>% 
  plot(ep_args = list(justmin = 15, abbreviate = TRUE))
```

:::

::: {.column width="50%"}
:::
:::

## Decision tree

::: columns
::: {.column width="50%"}
```{r plot-tree-fit-2}
#| echo: false
#| fig.width: 6
#| fig.height: 5
#| fig-align: center

library(partykit)
fit_pec <- fit_dt %>% extract_fit_engine()
fit_rpart <- fit_pec$rpart
fit_rpart %>% 
  as.party() %>% 
  plot(ep_args = list(justmin = 15, abbreviate = TRUE))
```
:::

::: {.column width="40%"}
-   Series of splits or if/then statements based on predictors

-   First the tree *grows* until some condition is met (maximum depth, no more data)

-   Then the tree is *pruned* to reduce its complexity
:::
:::

## Decision tree

::: columns
::: {.column width="50%"}
```{r plot-tree-fit-3}
#| echo: false
#| fig.width: 6
#| fig.height: 5
#| fig-align: center

library(partykit)
fit_pec <- fit_dt %>% extract_fit_engine()
fit_rpart <- fit_pec$rpart
fit_rpart %>% 
  as.party() %>% 
  plot(ep_args = list(justmin = 15, abbreviate = TRUE))
```
:::

::: {.column width="50%"}
```{r plot-tree-preds}
#| echo: false
#| fig.width: 8
#| fig.height: 7

cat_new_3 <- tibble(
  intake_condition = factor(c("normal", "feral", "ill_mild"))
)
p_dt <- fit_dt %>% 
  augment(new_data = cat_new_3, eval_time = seq(0, 360, 1)) %>% 
  mutate(intake_condition = factor(intake_condition, levels = c("feral", "normal", "ill_mild"))) %>% 
  tidyr::unnest(cols = .pred) %>% 
  ggplot() +
  geom_step(aes(.eval_time, .pred_survival, color = intake_condition)) +
  scale_color_discrete(
    labels = c("fractious, feral", "normal, other", "ill_mild, ill_moderatete, under_age_or_weight"),
    guide = guide_legend(ncol = 1)
    ) + 
  labs(x = "Time", y = "Probability of not adopted") +
  theme_bw(base_size = 18) +
  theme(legend.position = "bottom")
p_dt
```
:::
:::

## All models are wrong, but some are useful!

::: columns
::: {.column width="50%"}
### PH model
```{r plot-ph-3}
#| echo: false
#| fig.width: 7
#| fig.height: 6

p_ph
```
:::

::: {.column width="50%"}
### Decision tree
```{r plot-tree-preds-2}
#| echo: false
#| fig.width: 7
#| fig.height: 6

p_dt
```
:::
:::

# A model workflow

## Workflows bind preprocessors and models

```{r good-workflow}
#| echo: false
#| out-width: '70%'
#| fig-align: 'center'
knitr::include_graphics("images/good_workflow.png")
```

:::notes
Explain that PCA that is a preprocessor / dimensionality reduction, used to decorrelate data
:::


## What is wrong with this? {.annotation} {visibility="hidden"}

```{r bad-workflow}
#| echo: false
#| out-width: '70%'
#| fig-align: 'center'
knitr::include_graphics("images/bad_workflow.png")
```

## Why a `workflow()`? `r hexes("workflows")` {visibility="hidden"}

. . .

-   [Most importantly]{.underline}, a workflow captures the entire modeling process: `fit()` and `predict()` apply to the preprocessing steps in addition to the actual model fit

. . .

-   You can use other preprocessors besides formulas (more on feature engineering if time permits!)

. . .

-   They can help organize your work when working with multiple models

. . .

-   Workflows handle new data better than base R tools in terms of new factor levels

::: notes
Two ways workflows handle levels better than base R:

-   Enforces that new levels are not allowed at prediction time (this is an optional check that can be turned off)

-   Restores missing levels that were present at fit time, but happen to be missing at prediction time (like, if your "new" data just doesn't have an instance of that level)
:::

## Fit a model spec `r hexes("censored", "parsnip")`

```{r tree-spec}
tree_spec <-
  decision_tree() %>% 
  set_mode("censored regression")

tree_spec %>% 
  fit(event_time ~ ., data = cat_train) 
```

## Fit a model workflow `r hexes("censored", "parsnip", "workflows")`

```{r tree-wflow}
tree_spec <-
  decision_tree() %>% 
  set_mode("censored regression")

workflow() %>%
  add_formula(event_time ~ .) %>%
  add_model(tree_spec) %>%
  fit(data = cat_train) 
```

## Fit a model workflow `r hexes("censored", "parsnip", "workflows")`

```{r tree-wflow-fit}
tree_spec <-
  decision_tree() %>% 
  set_mode("censored regression")

tree_fit <-
  workflow(event_time ~ ., tree_spec) %>% 
  fit(data = cat_train) 
```

## Your turn {transition="slide-in"}

![](images/parsnip-flagger.jpg){.absolute top="0" right="0" width="150" height="150"}

*Make a workflow with your own model of choice.*

<br></br>

*Extension/Challenge: Other than formulas, what kinds of preprocessors are supported?*

```{r ex-explore-tree-workflow}
#| echo: false
countdown::countdown(minutes = 5, id = "explore-tree-workflow")
```

## Predict with your model `r hexes("censored", "parsnip", "workflows")`

How do you use your new `tree_fit` model?

```{r tree-wflow-predict}
predict(tree_fit, new_data = demo_cats)
```

## Predict with your model `r hexes("censored", "parsnip", "workflows")`

How do you use your new `tree_fit` model?

```{r tree-wflow-predict-time}
predict(tree_fit, new_data = demo_cats, type = "time")
```

## Predict with your model `r hexes("censored", "parsnip", "workflows")`

```{r tree-wflow-predict-survival}
preds <- predict(tree_fit, new_data = demo_cats, type = "survival", 
                 eval_time = seq(0, 365, by = 5))
preds
```

## Predict with your model `r hexes("censored", "parsnip", "workflows")`

```{r tree-wflow-predict-survival-2}
preds$.pred[[1]]
```

## Predict with your model `r hexes("censored", "parsnip", "workflows")`

```{r predict-survival-curve}
#| echo: false
#| fig.width: 8
#| fig.height: 6
#| fig.align: "center"
preds %>% 
  slice(c(1,2,5)) %>% 
  add_rowindex() %>% 
  mutate(cat = paste0("#", .row)) %>% 
  unnest(.pred) %>% 
  ggplot(aes(.eval_time, .pred_survival, col = cat)) +
  geom_step() +
  labs(x = "Time", y = "Probability of not adopted") +
  theme_bw(base_size = 18)
```

##  {background-iframe="https://censored.tidymodels.org/#available-models-engines-and-prediction-types"}


## Your turn

![](images/parsnip-flagger.jpg){.absolute top="0" right="0" width="150" height="150"}

*Run:*

`augment(tree_fit, new_data = demo_cats,`  
         `eval_time = seq(0, 365, by = 5))`

<br>

*What do you get?*

```{r ex-augment-tree-fit}
#| echo: false
countdown::countdown(minutes = 3, id = "augment-tree-fit")
```

# The tidymodels prediction guarantee!

. . .

-   The predictions will always be inside a **tibble**
-   The column names and types are **unsurprising** and **predictable**
-   The number of rows in `new_data` and the output **are the same**

## The whole game - status update

```{r diagram-model-1, echo = FALSE}
#| fig-align: "center"

knitr::include_graphics("images/whole-game-transparent-model-1.jpg")
```

:::notes
Stress that fitting a model on the entire training set was only for illustrating how to fit a model
:::
