---
title: "3 - What makes a model? - Classwork"
subtitle: "Survival analysis with tidymodels"
editor_options: 
  chunk_output_type: console
---

We recommend restarting R between each slide deck!

## Setup

Setup from deck 2

```{r}
library(tidymodels)
library(censored)
library(modeldata)

cat_adoption <- cat_adoption %>% 
  mutate(event_time = Surv(time, event), .keep = "unused", .before = everything())

set.seed(27)
in_demo <- sample.int(nrow(cat_adoption), 50)
demo_cats <- cat_adoption %>% slice(in_demo)

set.seed(123)
cat_split <- initial_split(cat_adoption %>% slice(-in_demo), prop = 0.8)
cat_train <- training(cat_split)
cat_test <- testing(cat_split)
```

## Your turn

How do you fit a linear model in R?

How many different ways can you think of?

Discuss with your neighbor!

## To specify a model

```{r}
# Model
proportional_hazards()

# Engine
proportional_hazards() %>%
  set_engine("glmnet")

# Mode - Some models have a default mode, others don't
decision_tree() %>% 
  set_mode("censored regression")
```

## Your turn

Write the specification for a proportional hazards model. Choose your engine.

Extension/Challenge: Edit this code to use a different model. For example, try using a conditional inference tree as implemented in the partykit package by changing the engine - or try an entirely different model type!

All available models are listed at <https://www.tidymodels.org/find/parsnip/>

```{r}
# Your code here!

```

## A model workflow

```{r}
tree_spec <-
  decision_tree() %>% 
  set_mode("censored regression")
```

Fit parsnip specification:

```{r}
tree_spec %>% 
  fit(event_time ~ ., data = cat_train) 
```

Fit with a workflow:

```{r}
workflow() %>%
  add_formula(event_time ~ .) %>%
  add_model(tree_spec) %>%
  fit(data = cat_train) 
```

"Shortcut" by specifying the preprocessor and model spec directly in the `workflow()` call:

```{r}
workflow(event_time ~ ., tree_spec) %>% 
  fit(data = cat_train) 
```

## Your turn

Make a workflow with your own model of choice.

Extension/Challenge: Other than formulas, what kinds of preprocessors are supported?

```{r}
# Your code here!

```

## Predict with your model

```{r}
tree_fit <-
  workflow(event_time ~ ., tree_spec) %>% 
  fit(data = cat_train) 
```

Predict time to event

```{r}
predict(tree_fit, new_data = demo_cats, type = "time")
```

Predict survival probability at time `eval_time`

```{r}
predict(tree_fit, new_data = demo_cats, type = "survival", 
        eval_time = seq(0, 365, by = 5))
```


## Your turn

What do you get from running the following code? How is `augment()` different from `predict()`?

```{r}
augment(tree_fit, new_data = demo_cats, eval_time = seq(0, 365, by = 5))
```
